# -*- encoding: utf-8 -*-
grammar Prunille
  include Prunille::Parser

  rule statement
    leading_spaces (assignment / expression)? <Statement>
  end
  
  rule expression
    operation / factor
  end
  
  rule operation
    factor space operator space factor <Operation>
  end
  
  rule factor
    (instanciation / identifier / text / integer / classname)
  end
  
  rule assignment
    identifier space keyword_is space instanciation <Assignment>
  end
  
  rule instanciation
    keyword_new space classname <Instanciation>
  end
  
  rule text
    '"' ([^"\\] / "\\" . )* '"' <TextLiteral>
  end
  
  rule keyword_is
    'is' !(!' ' .) <Keyword>
  end
  
  rule keyword_new
    'new' !(!' ' .) <Keyword>
  end

  rule identifier
    [a-z] [a-z0-9-]* <Identifier>
  end
  
  rule classname
    [A-Z] [a-zA-Z0-9]* <ClassLiteral>
  end
  
  rule integer
    ('+' / '-')? [0-9]+ <IntegerLiteral>
  end
  
  rule operator
    '+' <Operator>
  end
  
  rule leading_spaces
    ' '* <Spaces>
  end

  rule space
    [\s]+
  end
  
end
